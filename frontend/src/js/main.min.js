(() => {
    angular.module('mainApp', [
        'app.core',
        'app.layout',
        'app.components',
        'app.widgets'
    ]);

    angular.module('app.core', [
        'ui.router',
        'ui.bootstrap',
        'ui.layout',
        'ngResource',
        'ngCookies',
        'ngAnimate'
    ]);

    angular.module('app.widgets', [
        'app.core'
    ]);

    angular.module('app.components', [
        'app.core',
        'app.widgets'
    ]);

    angular.module('app.layout', [
        'app.core'
    ]);


})();


// Sample: {addr.location:a,addr.number:b} ==> addr%5Blocation%5D=a&addr%5Bnumber%5D=b
const serializeData = (obj, prefix) => {
    const str = [];
    for (let p in obj) {
        if (obj.constructor === Array) {
            console.log(obj);
            var k = prefix ? `${prefix}[${p}]` : p,
                v = obj[p];
            str.push(typeof v == "object" ?
                serializeData(v, k) :
                `${encodeURIComponent(k)}=${encodeURIComponent(v)}`);
        } else if (obj.hasOwnProperty(p)) {
            //   var k = prefix ? prefix + "[" + p + "]" : p, v = obj[p];
            var k = prefix ? `${prefix}.${p}` : p,
                v = obj[p];
            str.push(typeof v == "object" ?
                serializeData(v, k) :
                `${encodeURIComponent(k)}=${encodeURIComponent(v)}`);
        }
    }
    return str.join("&");
};

// Sample: 35% ==> 0.35
const percentToNum = param => {
    param = param.toString().replace('%', '');
    if (param != undefined && isNaN(param) == false) {
        return param * 1000 / 100000;
    } else {
        return '';
    }
};

/**
*  Secure Hash Algorithm (SHA256)
*  http://www.webtoolkit.info/
*  Original code by Angel Marin, Paul Johnston.
**/
const SHA256 = s => {const chrsz = 8;const hexcase = 0;function safe_add(x, y) {const lsw = (x & 0xFFFF) + (y & 0xFFFF);const msw = (x >> 16) + (y >> 16) + (lsw >> 16);return (msw << 16) | (lsw & 0xFFFF);}function S(X, n) {return (X >>> n) | (X << (32 - n));}function R(X, n) {return (X >>> n);}function Ch(x, y, z) {return ((x & y) ^ ((~x) & z));}function Maj(x, y, z) {return ((x & y) ^ (x & z) ^ (y & z));}function Sigma0256(x) {return (S(x, 2) ^ S(x, 13) ^ S(x, 22));}function Sigma1256(x) {return (S(x, 6) ^ S(x, 11) ^ S(x, 25));}function Gamma0256(x) {return (S(x, 7) ^ S(x, 18) ^ R(x, 3));}function Gamma1256(x) {return (S(x, 17) ^ S(x, 19) ^ R(x, 10));}function core_sha256(m, l) {
    const K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);const HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);const W = new Array(64);
    let a;
    let b;
    let c;
    let d;
    let e;
    let f;
    let g;
    let h;
    var i;
    var j;
    let T1, T2;m[l >> 5] |= 0x80 << (24 - l % 32);m[((l + 64 >> 9) << 4) + 15] = l;for (var i = 0; i < m.length; i += 16) {a = HASH[0];b = HASH[1];c = HASH[2];d = HASH[3];e = HASH[4];f = HASH[5];g = HASH[6];h = HASH[7];for (var j = 0; j < 64; j++) {if (j < 16) W[j] = m[j + i];else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);T2 = safe_add(Sigma0256(a), Maj(a, b, c));h = g;g = f;f = e;e = safe_add(d, T1);d = c;c = b;b = a;a = safe_add(T1, T2);}HASH[0] = safe_add(a, HASH[0]);HASH[1] = safe_add(b, HASH[1]);HASH[2] = safe_add(c, HASH[2]);HASH[3] = safe_add(d, HASH[3]);HASH[4] = safe_add(e, HASH[4]);HASH[5] = safe_add(f, HASH[5]);HASH[6] = safe_add(g, HASH[6]);HASH[7] = safe_add(h, HASH[7]);}return HASH;
}function str2binb(str) {const bin = Array();const mask = (1 << chrsz) - 1;for (let i = 0; i < str.length * chrsz; i += chrsz) {bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32);}return bin;}function Utf8Encode(string) {string = string.replace(/rn/g, "n");let utftext = "";for (let n = 0; n < string.length; n++) {const c = string.charCodeAt(n);if (c < 128) {utftext += String.fromCharCode(c);} else if ((c > 127) && (c < 2048)) {utftext += String.fromCharCode((c >> 6) | 192);utftext += String.fromCharCode((c & 63) | 128);} else {utftext += String.fromCharCode((c >> 12) | 224);utftext += String.fromCharCode(((c >> 6) & 63) | 128);utftext += String.fromCharCode((c & 63) | 128);}}return utftext;}function binb2hex(binarray) {const hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";let str = "";for (let i = 0; i < binarray.length * 4; i++) {str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);}return str;}s = Utf8Encode(s);return binb2hex(core_sha256(str2binb(s), s.length * chrsz));};

/**
*  Secure Hash Algorithm (SHA1)
*  http://www.webtoolkit.info/
**/
const SHA1 = msg => {function rotate_left(n, s) {const t4 = ( n<<s ) | (n>>>(32-s));return t4;};function lsb_hex(val) {let str="";let i;let vh;let vl;for( i=0; i<=6; i+=2 ) {vh = (val>>>(i*4+4))&0x0f;vl = (val>>>(i*4))&0x0f;str += vh.toString(16) + vl.toString(16);}return str;};function cvt_hex(val) {let str="";let i;let v;for( i=7; i>=0; i-- ) {v = (val>>>(i*4))&0x0f;str += v.toString(16);}return str;};function Utf8Encode(string) {string = string.replace(/rn/g,"n");let utftext = "";for (let n = 0; n < string.length; n++) {const c = string.charCodeAt(n);if (c < 128) {utftext += String.fromCharCode(c);}else if((c > 127) && (c < 2048)) {utftext += String.fromCharCode((c >> 6) | 192);utftext += String.fromCharCode((c & 63) | 128);}else {utftext += String.fromCharCode((c >> 12) | 224);utftext += String.fromCharCode(((c >> 6) & 63) | 128);utftext += String.fromCharCode((c & 63) | 128);}}return utftext;};let blockstart;let i, j;const W = new Array(80);let H0 = 0x67452301;let H1 = 0xEFCDAB89;let H2 = 0x98BADCFE;let H3 = 0x10325476;let H4 = 0xC3D2E1F0;let A, B, C, D, E;var temp;msg = Utf8Encode(msg);const msg_len = msg.length;const word_array = new Array();for( i=0; i<msg_len-3; i+=4 ) {j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);word_array.push(j);}switch( msg_len % 4 ) {case 0:i = 0x080000000;break;case 1:i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;break;case 2:i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;break;case 3:i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8 | 0x80;break;}word_array.push(i);while( (word_array.length % 16) != 14 ) word_array.push(0);word_array.push(msg_len>>>29);word_array.push((msg_len<<3)&0x0ffffffff);for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {for( i=0; i<16; i++ ) W[i] = word_array[blockstart+i];for( i=16; i<=79; i++ ) W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);A = H0;B = H1;C = H2;D = H3;E = H4;for( i= 0; i<=19; i++ ) {temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=20; i<=39; i++ ) {temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=40; i<=59; i++ ) {temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=60; i<=79; i++ ) {temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}H0 = (H0 + A) & 0x0ffffffff;H1 = (H1 + B) & 0x0ffffffff;H2 = (H2 + C) & 0x0ffffffff;H3 = (H3 + D) & 0x0ffffffff;H4 = (H4 + E) & 0x0ffffffff;}var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);return temp.toLowerCase();};


// Grab the files and set them to our variable
// ========================================================================================
// <input id="fileupload" type="file" class="" name="files[]" data-url="upload.do" multiple>
function prepareUpload(event) {
    const ele = $(this).siblings('.hidden')[0];
    uploadFiles(event.target.files, ele);

    // ele.value = resFileId;
    //
    // try {
    //     var resFileId = uploadFiles(event.target.files);
    //     var ele = $(this).siblings('.hidden')[0].value;
    //     var array = ele == ""? [] : ele.split(',') ;
    // } catch (e) {
    //     console.log(e);
    // } finally {
    //     console.log(array);
    //     array.push(resFileId);
    //     console.log(array);
    //     ele.value = array.join(',')).trigger('input';
    // }

    // ele.val(ele.val().split(',').push(resId).join(',')).trigger('input');

    // $(this).siblings('.hidden').val(uploadFiles(event.target.files)).trigger('input');
}


/**
 * @param files uploading files
 * @param ele element that need to receive response ID
 * @desc Files upload module for test. When received id, using "trigger('input')" make ng-model know
 */
function uploadFiles(files, ele) {
    // Create a formdata object and add the files
    const data = new FormData();
    $.each(files, (key, value) => {
        data.append("files", value);
    });

    console.log(files)

    $.ajax({
        url: 'upload.do',
        type: 'POST',
        data,
        cache: false,
        dataType: 'json',
        processData: false, // Don't process the files
        contentType: false, // Set content type to false as jQuery will tell the server its a query string request
        success(data, textStatus, jqXHR) {
            if (typeof data.error === 'undefined') {
                // Success so call function to process the form
                fileid = data.content.name;
                ele.value = data.content.name;
                $(ele).trigger('input');
                // submitForm(event, data);
            } else {
                // Handle errors here
                console.log(`ERRORS: ${data.error}`);
            }
        },
        error(jqXHR, textStatus, errorThrown) {
            // Handle errors here
            console.log(`ERRORS: ${textStatus}`);
            // STOP LOADING SPINNER
        }
    });
}

(() => {
    angular
        .module('app.components')
        .factory('clientOrder', clientOrder);

    /* @ngInject */
    clientOrder.$inject = ['$resource'];

    function clientOrder($resource) {
        return $resource('ws/clientorder/list', {}, {
            query: {
                method: 'GET',
                params: {},
                isArray: true
            }
        });
    }
})();

(() => {
    angular
        .module('app.components')
        .factory('marketOrder', marketOrder);

    /* @ngInject */
    marketOrder.$inject = ['$resource'];

    function marketOrder($resource) {
        return $resource('ws/marketorder/list/:coId', { coId: '@coId' });
    }
})();

(() => {
    angular
        .module('app.components')
        .service('fileUpload', fileUpload);

    /* @ngInject */
    fileUpload.$inject = ['$http'];

    function fileUpload($http) {
        this.uploadFileToUrl = function (file, uploadUrl) {
            var fd = new FormData();
            fd.append('file', file);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            })
                .success(function () {
                })
                .error(function () {
                });
        }
    }
})();

(() => {
    angular
        .module('app.components')
        .factory('Login', Login);

    /* @ngInject */
    Login.$inject = ['$resource'];

    function Login($resource) {
        return $resource('ws/login', {}, {
            login: {
                method: 'POST',
                params: {},
                isArray: false
            }
        });
    }
})();

(() => {
    angular
        .module('app.components')
        .factory('marketOrder', marketOrder);

    /* @ngInject */
    marketOrder.$inject = ['$resource'];

    function marketOrder($resource) {
        return $resource('ws/marketorder/list/:coId', { coId: '@coId' });
    }
})();

/**
 * @author Shawn
 * @desc mainAPP
 */
(() => {
    angular
        .module('app.core')
        // Global
        .constant('WEB_INFO', {
            title: 'Order Management System'
        })

        .constant('AUTH_EVENTS', {
            loginSuccess: 'auth-login-success',
            loginFailed: 'auth-login-failed',
            logoutSuccess: 'auth-logout-success',
            sessionTimeout: 'auth-session-timeout',
            notAuthenticated: 'auth-not-authenticated',
            pageNotFound: 'page-not-found',
            serverError: 'server-error'
        })

        // Do auth when state/url change
        .run(($rootScope, AUTH_EVENTS, AuthService) => {
            $rootScope.$on('$stateChangeStart', (event, next) => {
                if (!AuthService.isAuthenticated()) {
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);
                } else {
                    $rootScope.currentUser = AuthService.getUsername();
                }
            });
        })
})();

/**
 * @author Shawn
 * @desc The Root Controller of the mainAPP
 */
(() => {
    angular
        .module('app.core')
        .controller('mainCtrl', mainCtrl);

    mainCtrl.$inject = ['$rootScope', '$scope', '$location', '$state', '$window', 'AuthService', 'AUTH_EVENTS', 'CommonService'];

    function mainCtrl(
        $rootScope,
        $scope,
        $location,
        $state,
        $window,
        AuthService,
        AUTH_EVENTS,
        CommonService) {

        if (!AuthService.isAuthenticated()) {
            $location.path('/login');
            console.log(1);
        }

        $rootScope.setCurrentUser = user => {
            $rootScope.currentUser = user;
        };

        // Log out
        $scope.logout = () => {
            $rootScope.currentUser = null;
            $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
            console.log('logout success');
            // AuthService.logout().then(function(res) {
            //     if (CommonService.isReqSuccess(res)) {
            //         $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
            //         console.log('Log out success');
            //     } else {
            //         CommonService.handleResErr(res);
            //     }
            // }, function(res) {
            //     CommonService.handleHttpErr(res);
            // });
        }

        // Listening
        $scope.$on(AUTH_EVENTS.loginSuccess, (event, data) => {
            console.log("login success");
            $state.go('dashboard.order');
        });

        $scope.$on(AUTH_EVENTS.loginFailed, (event, data) => {
            AuthService.destory();
            console.log("login failed");
            // $location.path('/');
        });

        $scope.$on(AUTH_EVENTS.logoutSuccess, (event, data) => {
            AuthService.destroy();
            console.log("login failed");
            // $location.path('/');
        });

        $scope.$on('method-not-allow', (event, data) => {
            console.log("method not allow");
            // $location.path('/');
        });

        $scope.$on(AUTH_EVENTS.pageNotFound, (event, data) => {
            console.log('404 error');
        });

        $scope.$on(AUTH_EVENTS.serverError, (event, data) => {
            console.log('500 error');
        });

    }
})();

(() => {})();

/**
 * @author Shawn
 * @desc mainAPP
 */
(() => {
    const PROJECTSTATUS = {
        0: "te",
        1: "2",
        2: "3",
        3: "r",
        4: "r",
        5: "fewf",
        6: "feaw"
    };

    /* filters */
    const filters = angular.module('app.core')

    .filter('switch', () => param => {
        if (param == 1 || param == '1') {
            return 'OPEN';
        } else {
            return 'CLOSED';
        }
    })

    // 78 ===> 0.78
    .filter('percent', () => param => {
        if (param != undefined && isNaN(param) == false) {
            return param * 1000 / 100000;
        } else {
            return '';
        }
    })

    .filter('category', () => {
        const obj = CATEGORY;
        return param => obj[param] != undefined ? obj[param] : ""
    })

    .filter('buildcompany', () => {
        const obj = BUILDCOMPANY;
        return param => obj[param] != undefined ? obj[param] : ""
    })

    .filter('projectstatus', () => {
        const obj = PROJECTSTATUS;
        return param => obj[param] != undefined ? obj[param] : ""
    });
})();
/**
 * @author Shawn
 * @desc router of app.core
 */
(() => {
    angular.module('app.core')

        .config(
        ($stateProvider, $httpProvider, $urlRouterProvider, $locationProvider) => {

            // Interceptor of Requests
            $httpProvider.interceptors.push([
                '$injector',
                $injector => $injector.get('AuthInterceptor')
            ]);

            $locationProvider.html5Mode({
                enabled: false,
                requireBase: false
            });

            // For any unmatched url, redirect to /
            $urlRouterProvider.otherwise('/login');


            // loginregister
            $stateProvider

                // main page
                .state('dashboard', {
                    url: '/',
                    templateUrl: 'html/dashboard.html'
                })

                .state("dashboard.order", {
                    url: "order",
                    templateUrl: "js/components/client-order-list/client-order-list.html"
                }).state("dashboard.addClientOrder", {
                    url: "orderadd",
                    templateUrl: "js/components/client-order-add/client-order-add.html"
                }).state("dashboard.demo", {
                    url: "demo",
                    templateUrl: "html/demo.html"
                })

                .state('login', {
                    url: '/login',
                    templateUrl: 'html/login.html'
                }).state('register', {
                    url: '/register',
                    templateUrl: 'html/register.html'
                })

                // User Account
                .state('account', {
                    url: '/account',
                    templateUrl: 'html/account/account.html'
                }).state('account.me', {
                    url: '/me',
                    templateUrl: 'html/account/account.me.html'
                })

                // for test
                .state('test', {
                    url: '/test',
                    templateUrl: 'html/test-angular-ui-bootstrap.html',
                    controller: 'testCtrl'
                })
        }
        );
})();

/**
 * @author Shawn
 * @desc Services of the mainAPP
 */

// For test
const commonTest = true;

(() => {
    angular
        .module('app.core')
        .factory('AuthInterceptor', AuthInterceptor)
        .factory('CommonService', CommonService)
        .factory('AuthService', AuthService)
        .factory('registerService', registerService)
        .factory('userService', userService);

    AuthInterceptor.$inject = ['$rootScope', '$q', '$window', 'AUTH_EVENTS'];
    AuthService.$inject = ['$http', '$rootScope', 'AUTH_EVENTS', '$window', 'CommonService'];
    CommonService.$inject = ['$http'];
    registerService.$inject = ['$http', '$rootScope', 'CommonService'];
    userService.$inject = ['$http', '$rootScope', 'CommonService'];


    // Interceptor
    function AuthInterceptor($rootScope, $q, $window, AUTH_EVENTS) {
        const service = {
            request: requestHandler,
            response: responseHandler,
            responseError: responseErrorHandler
        };
        return service;

        function requestHandler(config) {
            config.headers = config.headers || {};
            if ($window.localStorage.token) {
                config.headers['X-AuthToken'] = $window.localStorage.token;
            }
            return config;
        }

        function responseHandler(response) {
            // console.log(response)
            if (response.status === 401) {
                // handle the case where the user is not authenticated
            }
            return response || $q.when(response);
        }

        function responseErrorHandler(response) {
            // console.log(response);
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthenticated,
                403: AUTH_EVENTS.notAuthorized,
                405: 'method-not-allow',
                419: AUTH_EVENTS.sessionTimeout,
                440: AUTH_EVENTS.sessionTimeout,
                404: AUTH_EVENTS.pageNotFound,
                500: AUTH_EVENTS.serverError
            }[response.status], response);
            return $q.reject(response);
        }
    }

    function AuthService($http, $rootScope, AUTH_EVENTS, $window, CommonService) {

        const service = {};

        let storageTokenTitle = 'token',
            storageUserTitle = 'username',
            ls = $window.localStorage;

        // forn user infomation (include token)
        service.createUserInfo = (username, token) => {
            ls.setItem(storageUserTitle, username);
            ls.setItem(storageTokenTitle, token);
        }
        service.destroy = () => {
            ls.removeItem(storageUserTitle);
            ls.removeItem(storageTokenTitle);
        }

        // only for Token
        service.createToken = (token) => {
            ls.setItem(storageTokenTitle, token);
        };

        service.getToken = () => ls.getItem(storageTokenTitle);

        service.removeToken = () => {
            ls.removeItem(storageTokenTitle);
        }

        // only for username
        service.getUsername = () => {
            ls.getItem(storageUserTitle)
        };

        service.login = user => CommonService.post("login", user);

        service.logout = () => CommonService.post("logout");

        // is session avalid
        service.isAuthenticated = () => {
            console.log(`isAuthenticated: ${!!ls.token}`);
            return !!ls.token;
        };

        return service;
    }


    function registerService($http, $rootScope, CommonService) {
        const service = {};

        service.register = user => CommonService.post("register", user);

        return service;
    }

    function userService($http, $rootScope, CommonService) {
        const service = {};

        return service;
    }


    // Global Services
    function CommonService($http) {
        // Set Content-Type to form-data which back-end can accept
        // $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';

        const urlBackEnd = 'http://lofewfcalhost:8080/ws/';
        // var urlBackEnd = 'http://10.22.16.124:8088/ws/marketorder/getByClientOrderId/';
        const urlMiddleEnd = 'https://ExampleURL.92/';

        // requests status handle
        this.isReqSuccess = res => {
            console.log(res);
            return res.data.errCode == 0 ? true : false;
        };

        // handle Http error
        this.handleHttpErr = res => {
            console.log('Req Error', res);
        };

        // handle response error (base on API)
        this.handleResErr = res => {
            console.log(res);
            if (res.data.errDesc == undefined) {
                console.log('Error without discription');
                console.log(`msg: ${res.errDesc}`);
            } else {
                alert(res.data.errDesc);
                console.log(res.data);
            }
        };

        // post single command to back-end server
        this.post = (command, data) => commonTest ? $http({
            url: `test-data/ws/${command}`,
            method: 'GET'
        }) : $http({
            url: urlBackEnd + command,
            method: 'POST',
            data
        });

        // post multi commands to server
        this.postMulti = () => {

        };

        return this;
    }



})();

(() => {
    angular
        .module('app.components')
        .controller('clientOrderAddCtrl', clientOrderAddCtrl);

    function clientOrderAddCtrl($scope, $window) {


    }
})();

(() => {
    angular
        .module('app.components')
        .controller('clientOrderBuyCtrl', clientOrderBuyCtrl);

    /* @ngInject */
    clientOrderBuyCtrl.$inject = ['$scope'];

    function clientOrderBuyCtrl($scope) {
        $scope.stockInfo = [{ uuid: "_ABC", ric: "", name: "" },
            { uuid: "_ABC", ric: "", name: "" },
            { uuid: "_ABC", ric: "", name: "" }]
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('clientOrderBuy', clientOrderBuy);

    function clientOrderBuy() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/client-order-add/client-order-buy.html',
            restrict: "E"
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .factory('clientOrder', clientOrder);

    /* @ngInject */
    clientOrder.$inject = ['$resource'];

    function clientOrder($resource) {
        return $resource('ws/clientorder/list', {}, {
            query: {
                method: 'GET',
                params: {},
                isArray: true
            }
        });
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('clientOrderSell', clientOrderSell);

    function clientOrderSell() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/client-order-add/client-order-sell.html',
            restrict: "E"
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .controller('clientOrderUploadCtrl', clientOrderUploadCtrl);

    /* @ngInject */
    clientOrderUploadCtrl.$inject = ['$scope', 'fileUpload'];

    function clientOrderUploadCtrl($scope, fileUpload) {

        $scope.upload = () => {
            var file = $scope.myFile;
            var uploadUrl = 'ws/file/upload';
            fileUpload.uploadFileToUrl(file, uploadUrl);
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('clientOrderUpload', clientOrderUpload);

    function clientOrderUpload() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/client-order-add/client-order-upload.html',
            restrict: "E"
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('fileModel', fileModel);

    /* @ngInject */
    fileModel.$inject = ['$parse'];

    function fileModel($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };

    }
})();

(() => {
    angular
        .module('app.components')
        .controller('CoListCtrl', CoListCtrl);

    CoListCtrl.$inject = ['$scope', '$rootScope', 'clientOrder', 'marketOrder', 'mo'];

    /* @ngInject */
    function CoListCtrl($scope, $rootScope, clientOrder, marketOrder, mo) {

        $scope.selectedClientOrderId = "";
        // $scope.marketOrderList = [];
        $scope.showMarketOrderList = id => {
            if ($scope.selectedClientOrderId != id) {
                $scope.selectedClientOrderId = id;
                queryMarketOrderList(id);
            }
        }

        $scope.closeMarketOrderList = () => {
            // $scope.close = !$scope.close;
            console.log($scope.selectedClientOrderId);
            $scope.selectedClientOrderId = "";
            console.log($scope.selectedClientOrderId);
        }

        // init
        clientOrder.query({}, res => {
            $scope.clientOrderItems = res;
        });


        // $interval(queryMarketOrderList, 1000);

        const queryMarketOrderList = (id) => {
            marketOrder.query({ coId: id }, res => {
                mo.set(res);
                $scope.$broadcast('market-orde-have-been-set');
                console.log(res)
            });
        }

    }

})();

(() => {
    angular
        .module('app.components')
        .controller('coPieCtrl', coPieCtrl);

    coPieCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', '$window', '$cookies', '$state', '$interval', 'AUTH_EVENTS', 'CommonService', 'AuthService', 'marketOrder'];

    /* @ngInject */
    function coPieCtrl(
        $scope,
        $rootScope,
        $location,
        $http,
        $window,
        $cookies,
        $state,
        $interval,
        AUTH_EVENTS,
        CommonService,
        AuthService,
        marketOrder) {


        const option = {
            title: {
                text: 'Market Order Pie',
                subtext: '',
                x: 'center'
            },
            tooltip: {
                trigger: 'item',
                formatter: "{a} <br/>{b} : {c} ({d}%)"
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['NYSE', 'NASDAQ', 'SSE', 'HKSE', 'SGSE']
            },
            series: [
                {
                    name: 'Exchange',
                    type: 'pie',
                    radius: '55%',
                    center: ['50%', '60%'],
                    data: [
                        { value: 335, name: 'NYSE' },
                        { value: 310, name: 'NASDAQ' },
                        { value: 234, name: 'SSE' },
                        { value: 135, name: 'HKSE' },
                        { value: 1548, name: 'SGSE' }
                    ],
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]
        };

        const myChart = echarts.init(document.getElementById('main'));
        myChart.setOption(option);

    }
})();

(() => {
    angular
        .module('app.components')
        .directive('clientOrderPie', clientOrderPie);

    function clientOrderPie() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/client-order-pie/client-order-pie.html',
            restrict: "E"
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .controller('LoginCtrl', LoginCtrl);

    LoginCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', '$window', '$cookies', '$state', 'AUTH_EVENTS', 'CommonService', 'AuthService', 'Login'];

    /* @ngInject */
    function LoginCtrl(
        $scope,
        $rootScope,
        $location,
        $http,
        $window,
        $cookies,
        $state,
        AUTH_EVENTS,
        CommonService,
        AuthService,
        Login) {

        // TODO check if user is Login
        if (AuthService.isAuthenticated()) {
            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
        }


        $scope.user = {};

        // $scope.alerts = []
        $scope.Alerts = {
            isShow: false,
            alerts: [],
            add(msg) {
                this.isShow = true;
                this.alerts = [];
                this.alerts.push(msg);
            },
            close(index) {
                this.isShow = false;
                this.alerts.splice(index, 1);
            }
        };


        $scope.login = user => {

            Login.login(user, res => {
                if (res.token != undefined && res.token != '') {
                    AuthService.createUserInfo(user.username, res.token);
                    $rootScope.currentUser = user.username;
                    $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
                    $scope.Alerts.close();
                } else {
                    $scope.Alerts.add({ type: "danger", msg: 'Login failed. Please try again.' });
                }
            }, res => {
                $scope.Alerts.add({ type: "danger", msg: res.data.reason || "Login failed." });
            });

            console.log(user);
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('loginPanel', loginPanel);

    loginPanel.$inject = ['$compile'];
    /* @ngInject */
    function loginPanel($compile) {
        return {
            restrict: 'E',
            scope: '@',
            templateUrl: 'js/components/login-panel/login-panel.html',
            link(scope) {
                // scope.name = "hel"
            }
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .controller('MoListCtrl', MoListCtrl);

    MoListCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', '$window', '$cookies', '$state', '$interval', 'AUTH_EVENTS', 'CommonService', 'AuthService', 'marketOrder', 'mo'];

    /* @ngInject */
    function MoListCtrl(
        $scope,
        $rootScope,
        $location,
        $http,
        $window,
        $cookies,
        $state,
        $interval,
        AUTH_EVENTS,
        CommonService,
        AuthService,
        marketOrder,
        mo) {
        
        // init
        $scope.marketOrderList = mo.get();

        $scope.$on('market-orde-have-been-set', function (data) {
            $scope.marketOrderList = mo.get();
        });
        $scope.$on('market-orde-have-been-updated', function (data) {
            $scope.marketOrderList = mo.get();
        });
    }
})();

(() => {
    angular
        .module('app.components')
        .directive('marketOrderList', marketOrderList);

    function marketOrderList() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/market-order-list/market-order-list.html',
            restrict: "E"
        };
    }
})();

(() => {
    angular
        .module('app.components')
        .factory('mo', mo);

    /* @ngInject */
    mo.$inject = ['$resource'];

    function mo($resource) {
        var service = {};

        service.marketOrderList = [];

        service.get = () => {
            return this.marketOrderList;
        };

        service.set = (data) => {
            this.marketOrderList = data;
        }

        service.rm = () => {
            this.marketOrderList = '';
        }

        return service;
    }
})();

/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */
(() => {
    angular
        .module('app.components')
        .controller('testCtrl', testCtrl);

    testCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', 'AUTH_EVENTS', 'AuthService'];


    function testCtrl($scope, $rootScope, $location, $http, AUTH_EVENTS, AuthService) {
        $scope.obj = {
            url: "user/login.do",
            method: "POST",
            data: ""
        };
        $scope.test = obj => {
            const aa = (JSON.parse(obj.data));
            $scope.result = {
                result: "",
                status: "",
                msg: "",
                content: ""
            };
            $http({
                url: obj.url,
                method: obj.method,
                data: serializeData(aa)
            }).then(res => {
                console.log(res);
                $scope.result.result = "Req Success";
                $scope.result = res;
            }, res => {
                console.log(res);
                $scope.result = res;
                $scope.result.result = "Req Fail";
            });
        }
    }
})();

/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */

(() => {
    angular
        .module('app.components')
        .controller('testCtrl', testCtrl);

    testCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', 'AUTH_EVENTS', 'AuthService'];

    function testCtrl($scope, $rootScope, $location, $http, AUTH_EVENTS, AuthService) {
        $scope.obj = {
            url: "user/login.do",
            method: "POST",
            data: ""
        };
        $scope.test = obj => {
            const aa = (JSON.parse(obj.data));
            $scope.result = {
                result: "",
                status: "",
                msg: "",
                content: ""
            };
            $http({
                url: obj.url,
                method: obj.method,
                data: serializeData(aa)
            }).then(res => {
                console.log(res);
                $scope.result.result = "Req Success";
                $scope.result = res;
            }, res => {
                console.log(res);
                $scope.result = res;
                $scope.result.result = "Req Fail";
            });
        }
    }
})();

/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */
(() => {
    angular
        .module('app.components')
        .controller('userCtrl', userCtrl);

    userCtrl.$inject = ['$scope', '$rootScope', '$location', 'AUTH_EVENTS', 'AuthService'];
    function userCtrl($scope, $rootScope, $location, AUTH_EVENTS, AuthService) {
        $scope.$on(AUTH_EVENTS.logoutSuccess, (event, data) => {
            $location.path("/");
        });

        if (!AuthService.isAuthenticated()) {
            console.log("user need login");
            $location.path("/login");
        }
    }
})();
(() => {
    angular
        .module('app.components')
        .directive('footer', footer);

    function footer() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/layout/footer/footer.html',
            restrict: "AE"
        };
    }
})();

(() => {
    angular.module('app.layout')
        // dashboard Sidebar
        .controller("SidebarCtrl", SidebarCtrl);

    SidebarCtrl.$inject = ["$scope", "$cookies"];


    function SidebarCtrl($scope, $cookies) {
        /**
         * Sidebar Toggle & Cookies Control
         */
        // const mobileView = 992;
        // $scope.getWidth = () => window.innerWidth;
        // $scope.$watch($scope.getWidth, (newValue, oldValue) => {
        //     if (newValue >= mobileView) {
        //         if (angular.isDefined($cookies.get('toggle'))) {
        //             $scope.toggle = !$cookies.get('toggle') ? true : false;
        //         } else {
        //             $scope.toggle = false;
        //         }
        //     } else {
        //         $scope.toggle = true;
        //     }
        // });
        $scope.toggleSidebar = () => {
            $scope.toggle = !$scope.toggle;
            // $cookies.put('toggle', $scope.toggle);
        };
        // window.onresize = () => {
        //     $scope.$apply();
        // };
    }
})();
(() => {
    angular.module('app.widgets')
        .controller('AlertsCtrl', AlertsCtrl);

    AlertsCtrl.$inject = ['$scope'];
    function AlertsCtrl($scope) {
        $scope.alerts = [{
            type: 'success',
            msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
        }, {
                type: 'danger',
                msg: 'Found a bug? Create an issue with as many details as you can.'
            }];

        $scope.addAlert = () => {
            $scope.alerts.push({
                msg: 'Another alert!'
            });
        };

        $scope.closeAlert = index => {
            $scope.alerts.splice(index, 1);
        };
    }
})();
(() => {
    angular
        .module('app.widgets')
        .directive("rdLoading", rdLoading);

    function rdLoading() {
        const d = {
            restrict: "AE",
            template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
        };
        return d
    }
})();

(() => {
    angular
        .module('app.widgets')
        // angular-ui Modal
        .controller('ModalDemoCtrl', ModalDemoCtrl);

    ModalDemoCtrl.$inject = ['$scope', '$uibModal', '$log'];
    function ModalDemoCtrl($scope, $uibModal, $log) {
        $scope.items = ['item1', 'item2', 'item3'];
        $scope.animationsEnabled = true;
        $scope.open = size => {
            const modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'myModalContent.html',
                controller: 'ModalInstanceCtrl',
                size,
                resolve: {
                    items() {
                        return $scope.items;
                    }
                }
            });

            modalInstance.result.then(selectedItem => {
                $scope.selected = selectedItem;
            }, () => {
                $log.info(`Modal dismissed at: ${new Date()}`);
            });
        };
        $scope.toggleAnimation = () => {
            $scope.animationsEnabled = !$scope.animationsEnabled;
        };

    }
})();

(() => {
    angular
        .module('app.widgets')

        // Please note that $uibModalInstance represents a modal window (instance) dependency.
        // It is not the same as the $uibModal service used above.
        // angular-ui Modal
        .controller('ModalInstanceCtrl', ModalInstanceCtrl);

    ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance', 'items'];
    function ModalInstanceCtrl($scope, $uibModalInstance, items) {
        $scope.items = items;
        $scope.selected = {
            item: $scope.items[0]
        };

        $scope.ok = () => {
            $uibModalInstance.close($scope.selected.item);
        };

        $scope.cancel = () => {
            $uibModalInstance.dismiss('cancel');
        };
    }
})();
(() => {
    angular.module('app.widgets')

        // angular-ui progressBar
        .controller('ProgressDemoCtrl', ProgressDemoCtrl);
    ProgressDemoCtrl.$inject = ['$scope'];

    function ProgressDemoCtrl($scope) {
        $scope.max = 200;

        $scope.random = () => {
            const value = Math.floor(Math.random() * 100 + 1);
            let type;

            if (value < 25) {
                type = 'warning';
            } else if (value < 50) {
                type = 'info';
            } else if (value < 75) {
                type = 'success';
            } else {
                type = 'success';
            }

            $scope.showWarning = type === 'danger' || type === 'warning';

            $scope.dynamic = value;
            $scope.type = type;
        };

        $scope.random();
        
        $scope.randomStacked = function() {
            $scope.stacked = [];
            var types = ['success', 'info', 'warning', 'danger'];

            // for (var i = 0, n = Math.floor(Math.random() * 4 + 1); i < n; i++) {
            //     var index = Math.floor(Math.random() * 4);
            //     $scope.stacked.push({
            //         value: Math.floor(Math.random() * 30 + 1),
            //         type: types[index]
            //     });
            // }
        };

        $scope.randomStacked();
    }
})();
(() => {
    angular
        .module('app.widgets')
        .directive('rdWidget', rdWidget);

    function rdWidget() {
        const directive = {
            transclude: true,
            template: '<div class="widget" ng-transclude></div>',
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
            /* */
        }
    }
})();

(() => {
    angular
    .module('app.widgets')
    .directive("rdWidgetBody", rdWidgetBody);

    function rdWidgetBody() {
        const d = {
            requires: "^rdWidget",
            scope: {
                loading: "@?",
                classes: "@?"
            },
            transclude: !0,
            template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
            restrict: "E"
        };
        return d
    }
})();

(() => {
    angular
    .module('app.widgets')
    .directive("rdWidgetFooter", rdWidgetFooter);

    function rdWidgetFooter() {
        const e = {
            requires: "^rdWidget",
            transclude: !0,
            template: '<div class="widget-footer" ng-transclude></div>',
            restrict: "E"
        };
        return e
    }
})();

(() => {
    angular
        .module('app.widgets')
        .directive("rdWidgetHeader", rdWidgetTitle);


    function rdWidgetTitle() {
        const e = {
            requires: "^rdWidget",
            scope: {
                title: "@",
                icon: "@"
            },
            transclude: !0,
            template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
            restrict: "E"
        };
        return e
    }
})();

//# sourceMappingURL=data:application/json;base64,
