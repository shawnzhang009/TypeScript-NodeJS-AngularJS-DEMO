(function() {
    'use strict';

    angular.module('mainApp', [
        'app.core',
        'app.layout',
        'app.components',
        'app.widgets'
    ]);

    angular.module('app.core', [
        'ui.router',
        'ui.bootstrap',
        'ngResource',
        'ngCookies',
        'ngAnimate'
    ]);

    angular.module('app.widgets', [
        'app.core'
    ]);

    angular.module('app.components', [
        'app.core',
        'app.widgets'
    ]);

})();


// Sample: {addr.location:a,addr.number:b} ==> addr%5Blocation%5D=a&addr%5Bnumber%5D=b
serializeData = function(obj, prefix) {
    var str = [];
    for (var p in obj) {
        if (obj.constructor === Array) {
            console.log(obj);
            var k = prefix ? prefix + "[" + p + "]" : p,
                v = obj[p];
            str.push(typeof v == "object" ?
                serializeData(v, k) :
                encodeURIComponent(k) + "=" + encodeURIComponent(v));
        } else if (obj.hasOwnProperty(p)) {
            //   var k = prefix ? prefix + "[" + p + "]" : p, v = obj[p];
            var k = prefix ? prefix + "." + p : p,
                v = obj[p];
            str.push(typeof v == "object" ?
                serializeData(v, k) :
                encodeURIComponent(k) + "=" + encodeURIComponent(v));
        }
    }
    return str.join("&");
}

// Sample: 35% ==> 0.35
percentToNum = function(param) {
    param = param.toString().replace('%', '');
    if (param != undefined && isNaN(param) == false) {
        return param * 1000 / 100000;
    } else {
        return '';
    }
}

/**
*  Secure Hash Algorithm (SHA256)
*  http://www.webtoolkit.info/
*  Original code by Angel Marin, Paul Johnston.
**/
var SHA256 = function(s) {var chrsz = 8;var hexcase = 0;function safe_add(x, y) {var lsw = (x & 0xFFFF) + (y & 0xFFFF);var msw = (x >> 16) + (y >> 16) + (lsw >> 16);return (msw << 16) | (lsw & 0xFFFF);}function S(X, n) {return (X >>> n) | (X << (32 - n));}function R(X, n) {return (X >>> n);}function Ch(x, y, z) {return ((x & y) ^ ((~x) & z));}function Maj(x, y, z) {return ((x & y) ^ (x & z) ^ (y & z));}function Sigma0256(x) {return (S(x, 2) ^ S(x, 13) ^ S(x, 22));}function Sigma1256(x) {return (S(x, 6) ^ S(x, 11) ^ S(x, 25));}function Gamma0256(x) {return (S(x, 7) ^ S(x, 18) ^ R(x, 3));}function Gamma1256(x) {return (S(x, 17) ^ S(x, 19) ^ R(x, 10));}function core_sha256(m, l) {var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);var W = new Array(64);var a, b, c, d, e, f, g, h, i, j;var T1, T2;m[l >> 5] |= 0x80 << (24 - l % 32);m[((l + 64 >> 9) << 4) + 15] = l;for (var i = 0; i < m.length; i += 16) {a = HASH[0];b = HASH[1];c = HASH[2];d = HASH[3];e = HASH[4];f = HASH[5];g = HASH[6];h = HASH[7];for (var j = 0; j < 64; j++) {if (j < 16) W[j] = m[j + i];else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);T2 = safe_add(Sigma0256(a), Maj(a, b, c));h = g;g = f;f = e;e = safe_add(d, T1);d = c;c = b;b = a;a = safe_add(T1, T2);}HASH[0] = safe_add(a, HASH[0]);HASH[1] = safe_add(b, HASH[1]);HASH[2] = safe_add(c, HASH[2]);HASH[3] = safe_add(d, HASH[3]);HASH[4] = safe_add(e, HASH[4]);HASH[5] = safe_add(f, HASH[5]);HASH[6] = safe_add(g, HASH[6]);HASH[7] = safe_add(h, HASH[7]);}return HASH;}function str2binb(str) {var bin = Array();var mask = (1 << chrsz) - 1;for (var i = 0; i < str.length * chrsz; i += chrsz) {bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32);}return bin;}function Utf8Encode(string) {string = string.replace(/rn/g, "n");var utftext = "";for (var n = 0; n < string.length; n++) {var c = string.charCodeAt(n);if (c < 128) {utftext += String.fromCharCode(c);} else if ((c > 127) && (c < 2048)) {utftext += String.fromCharCode((c >> 6) | 192);utftext += String.fromCharCode((c & 63) | 128);} else {utftext += String.fromCharCode((c >> 12) | 224);utftext += String.fromCharCode(((c >> 6) & 63) | 128);utftext += String.fromCharCode((c & 63) | 128);}}return utftext;}function binb2hex(binarray) {var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";var str = "";for (var i = 0; i < binarray.length * 4; i++) {str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);}return str;}s = Utf8Encode(s);return binb2hex(core_sha256(str2binb(s), s.length * chrsz));}

/**
*  Secure Hash Algorithm (SHA1)
*  http://www.webtoolkit.info/
**/
var SHA1 = function(msg) {function rotate_left(n,s) {var t4 = ( n<<s ) | (n>>>(32-s));return t4;};function lsb_hex(val) {var str="";var i;var vh;var vl;for( i=0; i<=6; i+=2 ) {vh = (val>>>(i*4+4))&0x0f;vl = (val>>>(i*4))&0x0f;str += vh.toString(16) + vl.toString(16);}return str;};function cvt_hex(val) {var str="";var i;var v;for( i=7; i>=0; i-- ) {v = (val>>>(i*4))&0x0f;str += v.toString(16);}return str;};function Utf8Encode(string) {string = string.replace(/rn/g,"n");var utftext = "";for (var n = 0; n < string.length; n++) {var c = string.charCodeAt(n);if (c < 128) {utftext += String.fromCharCode(c);}else if((c > 127) && (c < 2048)) {utftext += String.fromCharCode((c >> 6) | 192);utftext += String.fromCharCode((c & 63) | 128);}else {utftext += String.fromCharCode((c >> 12) | 224);utftext += String.fromCharCode(((c >> 6) & 63) | 128);utftext += String.fromCharCode((c & 63) | 128);}}return utftext;};var blockstart;var i, j;var W = new Array(80);var H0 = 0x67452301;var H1 = 0xEFCDAB89;var H2 = 0x98BADCFE;var H3 = 0x10325476;var H4 = 0xC3D2E1F0;var A, B, C, D, E;var temp;msg = Utf8Encode(msg);var msg_len = msg.length;var word_array = new Array();for( i=0; i<msg_len-3; i+=4 ) {j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);word_array.push( j );}switch( msg_len % 4 ) {case 0:i = 0x080000000;break;case 1:i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;break;case 2:i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;break;case 3:i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8 | 0x80;break;}word_array.push( i );while( (word_array.length % 16) != 14 ) word_array.push( 0 );word_array.push( msg_len>>>29 );word_array.push( (msg_len<<3)&0x0ffffffff );for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {for( i=0; i<16; i++ ) W[i] = word_array[blockstart+i];for( i=16; i<=79; i++ ) W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);A = H0;B = H1;C = H2;D = H3;E = H4;for( i= 0; i<=19; i++ ) {temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=20; i<=39; i++ ) {temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=40; i<=59; i++ ) {temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}for( i=60; i<=79; i++ ) {temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;E = D;D = C;C = rotate_left(B,30);B = A;A = temp;}H0 = (H0 + A) & 0x0ffffffff;H1 = (H1 + B) & 0x0ffffffff;H2 = (H2 + C) & 0x0ffffffff;H3 = (H3 + D) & 0x0ffffffff;H4 = (H4 + E) & 0x0ffffffff;}var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);return temp.toLowerCase();}


// Grab the files and set them to our variable
// ========================================================================================
// <input id="fileupload" type="file" class="" name="files[]" data-url="upload.do" multiple>
function prepareUpload(event) {
    var ele = $(this).siblings('.hidden')[0];
    uploadFiles(event.target.files, ele);

    // ele.value = resFileId;
    //
    // try {
    //     var resFileId = uploadFiles(event.target.files);
    //     var ele = $(this).siblings('.hidden')[0].value;
    //     var array = ele == ""? [] : ele.split(',') ;
    // } catch (e) {
    //     console.log(e);
    // } finally {
    //     console.log(array);
    //     array.push(resFileId);
    //     console.log(array);
    //     ele.value = array.join(',')).trigger('input';
    // }

    // ele.val(ele.val().split(',').push(resId).join(',')).trigger('input');

    // $(this).siblings('.hidden').val(uploadFiles(event.target.files)).trigger('input');
}


/**
 * @param files 需要上传的文件
 * @param ele 上传成功后接收返回文件ID的元素
 * @desc 文件上传模块, 设置返回id后，使用trigger('input')使ng-model能收到值
 */
function uploadFiles(files, ele) {
    // Create a formdata object and add the files
    var data = new FormData();
    $.each(files, function(key, value) {
        data.append("files", value);
    });

    console.log(files)

    $.ajax({
        url: 'upload.do',
        type: 'POST',
        data: data,
        cache: false,
        dataType: 'json',
        processData: false, // Don't process the files
        contentType: false, // Set content type to false as jQuery will tell the server its a query string request
        success: function(data, textStatus, jqXHR) {
            if (typeof data.error === 'undefined') {
                // Success so call function to process the form
                fileid = data.content.name;
                ele.value = data.content.name;
                $(ele).trigger('input');
                // submitForm(event, data);
            } else {
                // Handle errors here
                console.log('ERRORS: ' + data.error);
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Handle errors here
            console.log('ERRORS: ' + textStatus);
            // STOP LOADING SPINNER
        }
    });
}

/**
 * @author Shawn
 * @desc mainAPP
 */
(function() {
    'use strict';

    angular
        .module('app.core')
        // Global
        .constant('WEB_INFO', {
            title: 'Order Management System'
        })

        .constant('AUTH_EVENTS', {
            loginSuccess: 'auth-login-success',
            loginFailed: 'auth-login-failed',
            logoutSuccess: 'auth-logout-success',
            sessionTimeout: 'auth-session-timeout',
            notAuthenticated: 'auth-not-authenticated',
            pageNotFound: 'page-not-found',
            serverError: 'server-error'
        })

        // Do auth when state/url change
        .run(function($rootScope, AUTH_EVENTS, AuthService, Session) {
            $rootScope.$on('$stateChangeStart', function(event, next) {
                if (!AuthService.isAuthenticated()) {
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);
                } else {
                    $rootScope.currentUser = Session.getUserName();
                }
            });
        })

})();

/**
 * @author Shawn
 * @desc The Root Controller of the mainAPP
 */
(function() {
    'use strict';

    angular
        .module('app.core')
        .controller('mainCtrl', mainCtrl);

    mainCtrl.$inject = ['$rootScope', '$scope', '$location', '$state', '$window', 'AuthService', 'AUTH_EVENTS', 'CommonService', 'Session'];

    function mainCtrl($rootScope, $scope, $location, $state, $window, AuthService, AUTH_EVENTS, CommonService, Session) {

        // if (!$window.sessionStorage.token) {
        //     $location.path('/login');
        //     console.log(1);
        // }

        // for test
        $scope.toggleMO = function() {
            $(this).addClass("al")
            console.log(this)
            $('.mo-list').animate({
                height: 'toggle'
            }, 350);
        }
        $scope.orderItems = [];
        for (var i = 0; i < 30; i++) {
            $scope.orderItems[i] = i;
        }

        $rootScope.setCurrentUser = function(user) {
            $rootScope.currentUser = user;
        };

        // Log out
        $scope.logout = function() {
            $window.sessionStorage.token = '';
            // Session.destroy();
            $rootScope.currentUser = null;
            AuthService.logout().then(function(res) {
                if (CommonService.isReqSuccess(res)) {
                    $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
                    console.log('Log out success');
                } else {
                    CommonService.handleResErr(res);
                }
            }, function(res) {
                CommonService.handleHttpErr(res);
            });
        }

        // Listening
        $scope.$on(AUTH_EVENTS.loginSuccess, function(event, data) {
            console.log("login success");
            $location.path('/order');
        });

        $scope.$on(AUTH_EVENTS.loginFailed, function(event, data) {
            $window.sessionStorage.token = '';
            console.log("login failed");
            // $location.path('/');
        });

        $scope.$on('method-not-allow', function(event, data) {
            console.log("method not allow");
            // $location.path('/');
        });

        $scope.$on(AUTH_EVENTS.pageNotFound, function(event, data) {
            console.log('404 error');
        });

        $scope.$on(AUTH_EVENTS.serverError, function(event, data) {
            console.log('500 error');
        });

    }
})();

(function() {
    'use strict';


})();

/**
 * @author Shawn
 * @desc mainAPP
 */
(function() {
    'use strict';
const PROJECTSTATUS = {
    0: "科技",
    1: "艺术",
    2: "娱乐",
    3: "农业",
    4: "地产",
    5: "公益",
    6: "其他"
};

// 项目审核状态
const AUDITSTATUS = {
    0: "未提交",
    10: "未审核",
    20: "审核未通过",
    30: "预热中",
    40: "中",
    50: "即将结束",
    60: "已成功",
    70: "已失败"
};

// 项目所处阶段
const PROJECTPHASE = {
    0: "研发中",
    1: "已正式发布",
    2: "已有收入",
    3: "已盈利"
}
const BUILDCOMPANY = {
    0: "未成立",
    1: "已成立"
};
const CATEGORY = {
    0: "科技",
    1: "艺术",
    2: "娱乐",
    3: "农业",
    4: "地产",
    5: "公益",
    6: "其他"
};

/* filters */
var filters = angular.module('app.core')

// 开关过滤器，0则显示关闭，1则显示开启
.filter('switch', function() {
    return function(param) {
        if (param == 1 || param == '1') {
            return '开启';
        } else {
            return '关闭';
        }
    }
})

// 百分比,页面一般有额外百分号，传入*100的数值，输出小数
.filter('percent', function() {
    return function(param) {
        if (param != undefined && isNaN(param) == false) {
            return param * 1000 / 100000;
        } else {
            return '';
        }
    }
})

.filter('category', function() {
    var obj = CATEGORY;
    return function(param) {
        return obj[param] != undefined ? obj[param] : "";
    }
})

.filter('buildcompany', function() {
    var obj = BUILDCOMPANY;
    return function(param) {
        return obj[param] != undefined ? obj[param] : "";
    }
})

.filter('projectphase', function() {
    var obj = PROJECTPHASE;
    return function(param) {
        return obj[param] != undefined ? obj[param] : "";
    }
})

.filter('auditstatus', function() {
    var obj = AUDITSTATUS;
    return function(param) {
        return obj[param] != undefined ? obj[param] : "";
    }
})

.filter('projectstatus', function() {
    var obj = PROJECTSTATUS;
    return function(param) {
        return obj[param] != undefined ? obj[param] : "";
    }
})
})();

/**
 * @author Shawn
 * @desc router of app.core
 */
(function() {
    'use strict';

    angular.module('app.core')

    .config(function($stateProvider, $httpProvider, $urlRouterProvider, $locationProvider) {

        // Interceptor of Requests
        $httpProvider.interceptors.push([
            '$injector',
            function($injector) {
                return $injector.get('AuthInterceptor');
            }
        ]);

        $locationProvider.html5Mode({
            enabled: false,
            requireBase: false
        });

        // For any unmatched url, redirect to /
        $urlRouterProvider.otherwise('/order');


        // loginregister
        $stateProvider

        // main page
        .state('home', {
            url: '',
            templateUrl: 'html/dashboard.html'
        })

        .state("home.dash1", {
            url: "/dash1",
            templateUrl: "html/rdash/dashboard.html"
        }).state("home.order", {
            url: "/order",
            templateUrl: "html/rdash/order-list.html"
        }).state("home.dash2", {
            url: "/dash2",
            templateUrl: "html/rdash/tables.html"
        })

        .state('login', {
            url: '/login',
            templateUrl: 'html/login.html'
        }).state('register', {
            url: '/register',
            templateUrl: 'html/register.html'
        })

        // User Account
        .state('account', {
            url: '/account',
            templateUrl: 'html/account/account.html'
        }).state('account.me', {
            url: '/me',
            templateUrl: 'html/account/account.me.html'
        }).state('account.charge', {
            url: '/charge',
            templateUrl: 'html/account/account.charge.html',
            controller: 'chargeCtrl'
        }).state('account.card', {
            url: '/card',
            templateUrl: 'html/account/account.card.html'
        }).state('account.coupons', {
            url: '/coupons',
            templateUrl: 'html/account/account.coupons.html'
        }).state('account.deposit', {
            url: '/deposit',
            templateUrl: 'html/account/account.deposit.html'
        }).state('account.gold', {
            url: '/gold',
            templateUrl: 'html/account/account.gold.html'
        }).state('account.reserve', {
            url: '/reserve',
            templateUrl: 'html/account/account.reserve.html'
        }).state('account.transaction', {
            url: '/transaction',
            templateUrl: 'html/account/account.transaction.html'
        }).state('account.withdraw', {
            url: '/withdraw',
            templateUrl: 'html/account/account.withdraw.html'
        })

        // for test
        .state('test', {
            url: '/test',
            templateUrl: 'html/test-angular-ui-bootstrap.html',
            controller: 'testCtrl'
        })
    });
})();

/**
 * @author Shawn
 * @desc Services of the mainAPP
 */

// For test
var commonTest = true;

(function() {
    'use strict';

    angular
        .module('app.core')
        .factory('AuthInterceptor', AuthInterceptor)
        .factory('Session', Session)
        .factory('CommonService', CommonService)
        .factory('AuthService', AuthService)
        .factory('registerService', registerService)
        .factory('userService', userService);

    Session.$inject = ['$cookies'];
    AuthInterceptor.$inject = ['$rootScope', '$q', '$window', 'AUTH_EVENTS'];
    AuthService.$inject = ['$http', '$rootScope', 'AUTH_EVENTS', 'Session', 'CommonService'];
    CommonService.$inject = ['$http', 'Session'];
    registerService.$inject = ['$http', '$rootScope', 'CommonService'];
    userService.$inject = ['$http', '$rootScope', 'Session', 'CommonService'];


    function AuthInterceptor($rootScope, $q, $window, AUTH_EVENTS) {
        var service = {
            request: requestHandler,
            response: responseHandler,
            responseError: responseErrorHandler
        };
        return service;

        function requestHandler(config) {
            config.headers = config.headers || {};
            if ($window.sessionStorage.token) {
                config.headers.Authorization = $window.sessionStorage.token;
            }
            return config;
        }

        function responseHandler(response) {
            // console.log(response)
            if (response.status === 401) {
                // handle the case where the user is not authenticated
            }
            return response || $q.when(response);
        }

        function responseErrorHandler(response) {
            // console.log(response);
            $rootScope.$broadcast({
                401: AUTH_EVENTS.notAuthenticated,
                403: AUTH_EVENTS.notAuthorized,
                405: 'method-not-allow',
                419: AUTH_EVENTS.sessionTimeout,
                440: AUTH_EVENTS.sessionTimeout,
                404: AUTH_EVENTS.pageNotFound,
                500: AUTH_EVENTS.serverError
            }[response.status], response);
            return $q.reject(response);
        }
    }


    function Session($cookies) {
        var aName = "USERID";
        var bName = "SID";

        this.create = function(sessionId, userId) {
            $cookies.put(aName, userId);
            $cookies.put(bName, sessionId);
        }
        // this.create = function(sessionId, userId) {
        //     document.cookie = aName + '=' + userId;
        //     document.cookie = bName + '=' + sessionId;
        //     this.id = sessionId;
        //     this.userId = userId;
        // };

        this.get = function(name) {
            return $cookies.getObject(name);
            // if (document.cookie.length > 0) {
            //     var start = document.cookie.indexOf(name + "=");
            //     if (start != -1) {
            //         start = start + name.length + 1;
            //         var end = document.cookie.indexOf(";", start);
            //         if (end == -1) end = document.cookie.length;
            //         return unescape(document.cookie.substring(start, end));
            //     }
            // }
            // return "";
        };
        this.getUserName = function() {
            return this.get(aName);
        };
        this.getSessionId = function() {
            return this.get(bName);
        };
        this.getObj = function() {
            return {
                'accountname': this.get(aName),
                'sessionid': this.get(bName)
            }
        };
        this.destroy = function() {
            document.cookie = aName + '=';
            document.cookie = bName + '=';
            this.id = null;
            this.userId = null;
        };
        return this;
    }


    // Global Services
    function CommonService($http, Session) {
        // Set Content-Type to form-data which back-end can accept
        // $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';

        var urlBackEnd = 'http://lofewfcalhost:8080/ws/';
        // var urlBackEnd = 'http://10.22.16.124:8088/ws/marketorder/getByClientOrderId/';
        var urlMiddleEnd = 'https://ExampleURL.92/';

        // requests status handle
        this.isReqSuccess = function(res) {
            console.log(res);
            return res.data.errCode == 0 ? true : false;
        };

        // handle Http error
        this.handleHttpErr = function(res) {
            console.log('Req Error', res);
        };

        // handle response error (base on API)
        this.handleResErr = function(res) {
            console.log(res);
            if (res.data.errDesc == undefined) {
                console.log('Error without discription');
                console.log('msg: ' + res.errDesc);
            } else {
                alert(res.data.errDesc);
                console.log(res.data);
            }
        };

        // post single command to back-end server
        this.post = function(command, data) {
            // Request parameters structure
            // var data111 = $.extend({
            //     "command": command
            // }, Session.getObj(), data);

            // console.log(angular.toJson(data));
            return commonTest ? $http({
                url: 'test-data/ws/' + command,
                method: 'GET'
            }) : $http({
                url: urlBackEnd + command,
                method: 'POST',
                data: data
            })
        };

        // post multi commands to server
        this.postMulti = function() {

        };

        return this;
    }


    function AuthService($http, $rootScope, AUTH_EVENTS, Session, CommonService) {

        var authService = {};

        authService.login = function(user) {
            return CommonService.post("login", user);
        };

        authService.logout = function() {
            return CommonService.post("logout");
        };

        // is session avalid
        authService.isAuthenticated = function() {
            console.log('isAuthenticated: ' + !!Session.get('USERID'));
            return !!Session.get('USERID');
        };

        return authService;
    }


    function registerService($http, $rootScope, CommonService) {
        var service = {};

        service.register = function(user) {
            return CommonService.post("register", user);
        };

        return service;
    }

    function userService($http, $rootScope, Session, CommonService) {
        var service = {};

        return service;
    }

})();


(function() {
    'use strict';

    angular.module('app.layout', [
        'app.core'
    ]);
})();


(function() {
    'use strict';

    angular
        .module('app.components')
        .directive('footer', footer);

    function footer() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/footer/footer.html',
            restrict: "AE"
        };
    }

})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('CoListCtrl', CoListCtrl);

    CoListCtrl.$inject = ['$scope', 'clientOrder'];

    /* @ngInject */
    function CoListCtrl($scope, clientOrder) {
            
        clientOrder.get(clientOrder, function(res) {
            console.log(res)
        }, function(res) {
            console.log('Can not load data.');
        });
        $scope.clientOrderItems = []; 
        for (var i = 0; i < 30; i++) {
            $scope.clientOrderItems[i] = i;
        }
       
    }

})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .factory('clientOrder', clientOrder);

    /* @ngInject */
    clientOrder.$inject = ['$resource'];

    function clientOrder($resource) {
        return $resource('ws/clientOrder', {}, {
            clientOrder: {
                method: 'POST',
                params: {},
                isArray: false
            }
        });
    }

})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('LoginCtrl', LoginCtrl);

    LoginCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', '$window', '$cookies', '$state', 'AUTH_EVENTS', 'CommonService', 'Session', 'AuthService', 'Login'];

    /* @ngInject */
    function LoginCtrl($scope, $rootScope, $location, $http, $window, $cookies, $state, AUTH_EVENTS, CommonService, Session, AuthService, Login) {

        $scope.user = {};
        $scope.login = function(user) {

            Login.login(user, function(res) {
                if (res.token != undefined && res.token != '') {
                    $window.sessionStorage.token = res.token;
                    $rootScope.currentUser = user.username;
                    $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
                } else {
                    alert('Login failed. Please try again.');
                }
            }, function(res) {
                alert('Invalid username or password. Please login again.');
            });

            console.log(user);
        }
    }

})();

(function() {
    'use strict';


    angular
        .module('app.components')
        .directive('loginPanel', loginPanel);

    loginPanel.$inject = ['$compile'];
    /* @ngInject */
    function loginPanel($compile) {
        return {
            restrict: 'E',
            scope: '@',
            templateUrl: 'js/components/login-panel/login-panel.html',
            link: function(scope) {
                // scope.name = "hel"
            }
        };
    }

})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .factory('Login', Login);

    /* @ngInject */
    Login.$inject = ['$resource'];

    function Login($resource) {
        return $resource('ws/login', {}, {
            login: {
                method: 'POST',
                params: {},
                isArray: false
            }
        });
    }

})();

/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */
(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('testCtrl', testCtrl);

    testCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', 'AUTH_EVENTS', 'AuthService'];


    function testCtrl($scope, $rootScope, $location, $http, AUTH_EVENTS, AuthService) {
        $scope.obj = {
            url: "user/login.do",
            method: "POST",
            data: ""
        };
        $scope.test = function(obj) {
            var aa = (JSON.parse(obj.data));
            $scope.result = {
                result: "",
                status: "",
                msg: "",
                content: ""
            };
            $http({
                url: obj.url,
                method: obj.method,
                data: serializeData(aa)
            }).then(function(res) {
                console.log(res);
                $scope.result.result = "Req Success";
                $scope.result = res;
            }, function(res) {
                console.log(res);
                $scope.result = res;
                $scope.result.result = "Req Fail";
            });
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('MoListCtrl', MoListCtrl);

    MoListCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', '$window', '$cookies', '$state', 'AUTH_EVENTS', 'CommonService', 'Session', 'AuthService', 'Login'];

    /* @ngInject */
    function MoListCtrl($scope, $rootScope, $location, $http, $window, $cookies, $state, AUTH_EVENTS, CommonService, Session, AuthService, Login) {

        // if (!!$rootScope.currentUser) {
        //     $state.go('home');
        // }


        $scope.user = {};
        $scope.login = function(user) {

            Login.get({}, function(res) {
                console.log(res)
                $window.sessionStorage.token = res.token || '';
                $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
                $state.go('home.order');
            }, function(res) {
                alert('login failed.');
            });

            console.log(user);
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .directive('marketOrderList', marketOrderList);

    function marketOrderList() {
        return {
            scope: {
                icon: "@"
            },
            templateUrl: 'js/components/market-order-list/market-order-list.html',
            restrict: "E"
        };
    }


})();

(function() {
    'use strict';

    angular
        .module('app.components')
        .factory('marketOrder', marketOrder);

    /* @ngInject */
    marketOrder.$inject = ['$resource'];

    function marketOrder($resource) {
        return $resource('ws/marketOrder', {}, {});
    }

})();

/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */
(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('userCtrl', userCtrl);

    userCtrl.$inject = ['$scope', '$rootScope', '$location', 'Session', 'AUTH_EVENTS', 'AuthService'];
    function userCtrl($scope, $rootScope, $location, Session, AUTH_EVENTS, AuthService) {
        $scope.$on(AUTH_EVENTS.logoutSuccess, function(event, data) {
            $location.path("/");
        });

        if (!AuthService.isAuthenticated()) {
            console.log("user need login");
            $location.path("/login");
        }
    }

})();
/**
 * @author Shawn
 * @desc Controllers of the mainAPP
 */

(function() {
    'use strict';

    angular
        .module('app.components')
        .controller('testCtrl', testCtrl);

    testCtrl.$inject = ['$scope', '$rootScope', '$location', '$http', 'AUTH_EVENTS', 'AuthService'];

    function testCtrl($scope, $rootScope, $location, $http, AUTH_EVENTS, AuthService) {
        $scope.obj = {
            url: "user/login.do",
            method: "POST",
            data: ""
        };
        $scope.test = function(obj) {
            var aa = (JSON.parse(obj.data));
            $scope.result = {
                result: "",
                status: "",
                msg: "",
                content: ""
            };
            $http({
                url: obj.url,
                method: obj.method,
                data: serializeData(aa)
            }).then(function(res) {
                console.log(res);
                $scope.result.result = "Req Success";
                $scope.result = res;
            }, function(res) {
                console.log(res);
                $scope.result = res;
                $scope.result.result = "Req Fail";
            });
        }
    }
})();

(function() {
    'use strict';

    angular.module('app.layout')
        // dashboard Sidebar
        .controller("MasterCtrl", MasterCtrl);

    MasterCtrl.$inject = ["$scope", "$cookies"];


    function MasterCtrl($scope, $cookies) {
        /**
         * Sidebar Toggle & Cookies Control
         */
        var mobileView = 992;
        $scope.getWidth = function() {
            return window.innerWidth;
        };
        $scope.$watch($scope.getWidth, function(newValue, oldValue) {
            if (newValue >= mobileView) {
                if (angular.isDefined($cookies.get('toggle'))) {
                    $scope.toggle = !$cookies.get('toggle') ? true : false;
                } else {
                    $scope.toggle = false;
                }
            } else {
                $scope.toggle = true;
            }
        });
        $scope.toggleSidebar = function() {
            $scope.toggle = !$scope.toggle;
            $cookies.put('toggle', $scope.toggle);
        };
        window.onresize = function() {
            $scope.$apply();
        };
    }


})();
(function() {
    'use strict';
    angular.module('app.widgets')
        .controller('AlertsCtrl', AlertsCtrl);

    AlertsCtrl.$inject = ['$scope'];
    function AlertsCtrl($scope) {
        $scope.alerts = [{
            type: 'success',
            msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
        }, {
                type: 'danger',
                msg: 'Found a bug? Create an issue with as many details as you can.'
            }];

        $scope.addAlert = function() {
            $scope.alerts.push({
                msg: 'Another alert!'
            });
        };

        $scope.closeAlert = function(index) {
            $scope.alerts.splice(index, 1);
        };
    }
})();
(function() {
    'use strict';

    angular
        .module('app.widgets')
        // angular-ui Modal
        .controller('ModalDemoCtrl', ModalDemoCtrl);

    ModalDemoCtrl.$inject = ['$scope', '$uibModal', '$log'];
    function ModalDemoCtrl($scope, $uibModal, $log) {
        $scope.items = ['item1', 'item2', 'item3'];
        $scope.animationsEnabled = true;
        $scope.open = function(size) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'myModalContent.html',
                controller: 'ModalInstanceCtrl',
                size: size,
                resolve: {
                    items: function() {
                        return $scope.items;
                    }
                }
            });

            modalInstance.result.then(function(selectedItem) {
                $scope.selected = selectedItem;
            }, function() {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
        $scope.toggleAnimation = function() {
            $scope.animationsEnabled = !$scope.animationsEnabled;
        };

    }
})();

(function() {
    'use strict';

    angular
        .module('app.widgets')

        // Please note that $uibModalInstance represents a modal window (instance) dependency.
        // It is not the same as the $uibModal service used above.
        // angular-ui Modal
        .controller('ModalInstanceCtrl', ModalInstanceCtrl);

    ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance', 'items'];
    function ModalInstanceCtrl($scope, $uibModalInstance, items) {
        $scope.items = items;
        $scope.selected = {
            item: $scope.items[0]
        };

        $scope.ok = function() {
            $uibModalInstance.close($scope.selected.item);
        };

        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }

})();
(function() {
    'use strict';
    angular
        .module('app.widgets')
        .directive("rdLoading", rdLoading);

    function rdLoading() {
        var d = {
            restrict: "AE",
            template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
        };
        return d
    }

})();


(function() {
    'use strict';

    angular.module('app.widgets')

        // angular-ui progressBar
        .controller('ProgressDemoCtrl', ProgressDemoCtrl);
    ProgressDemoCtrl.$inject = ['$scope'];

    function ProgressDemoCtrl($scope) {
        $scope.max = 200;

        $scope.random = function() {
            var value = Math.floor(Math.random() * 100 + 1);
            var type;

            if (value < 25) {
                type = 'warning';
            } else if (value < 50) {
                type = 'info';
            } else if (value < 75) {
                type = 'success';
            } else {
                type = 'success';
            }

            $scope.showWarning = type === 'danger' || type === 'warning';

            $scope.dynamic = value;
            $scope.type = type;
        };

        $scope.random();

        $scope.randomStacked = function() {
            $scope.stacked = [];
            var types = ['success', 'info', 'warning', 'danger'];

            for (var i = 0, n = Math.floor(Math.random() * 4 + 1); i < n; i++) {
                var index = Math.floor(Math.random() * 4);
                $scope.stacked.push({
                    value: Math.floor(Math.random() * 30 + 1),
                    type: types[index]
                });
            }
        };

        $scope.randomStacked();
    }
})();
(function() {
    'use strict';

    angular
    .module('app.widgets')
    .directive("rdWidgetBody", rdWidgetBody);
    
    function rdWidgetBody() {
        var d = {
            requires: "^rdWidget",
            scope: {
                loading: "@?",
                classes: "@?"
            },
            transclude: !0,
            template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
            restrict: "E"
        };
        return d
    }

})();

(function() {
    'use strict';


    angular
        .module('app.widgets')
        .directive('rdWidget', rdWidget);

    function rdWidget() {
        var directive = {
            transclude: true,
            template: '<div class="widget" ng-transclude></div>',
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
            /* */
        }
    };

})();

(function() {
    'use strict';
    angular
    .module('app.widgets')
    .directive("rdWidgetFooter", rdWidgetFooter);

    function rdWidgetFooter() {
        var e = {
            requires: "^rdWidget",
            transclude: !0,
            template: '<div class="widget-footer" ng-transclude></div>',
            restrict: "E"
        };
        return e
    }


})();

(function() {
    'use strict';

    angular
        .module('app.widgets')
        .directive("rdWidgetHeader", rdWidgetTitle);


    function rdWidgetTitle() {
        var e = {
            requires: "^rdWidget",
            scope: {
                title: "@",
                icon: "@"
            },
            transclude: !0,
            template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
            restrict: "E"
        };
        return e
    }

})();

//# sourceMappingURL=data:application/json;base64,
